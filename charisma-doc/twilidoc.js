// Generated by CoffeeScript 1.3.3
(function() {
  var ATTR_CONST, ATTR_INLINE, ATTR_PTR, ATTR_REF, ATTR_STATIC, ATTR_UNSIGNED, ATTR_VIRTUAL, AnchorHandle, Attribute, Breadcrumb, Class, ClassList, Menu, MenuEntry, View, Widget,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ATTR_PTR = 1;

  ATTR_REF = 2;

  ATTR_CONST = 4;

  ATTR_UNSIGNED = 8;

  ATTR_STATIC = 16;

  ATTR_INLINE = 32;

  ATTR_VIRTUAL = 64;

  View = (function() {

    function View() {}

    View.prototype.Display = function() {
      $("#page-content").empty();
      $("#page-content").append(this.elem);
      return window.current_view = this;
    };

    return View;

  })();

  Widget = (function() {

    function Widget() {}

    Widget.prototype.Begin = function(title, icon) {
      return "<div class='row-fluid sortable'>        <div class='box span12'>          <div class='box-header well' data-original-title>            <h2>" + (icon != null ? "<i class='" + icon + "'></i>" : '') + (" " + title + "</h2>            <div class='box-icon'>            </div>          </div>          <div class='box-content'>");
    };

    Widget.prototype.End = function() {
      return "</div></div></div>";
    };

    return Widget;

  })();

  Attribute = (function() {

    function Attribute() {}

    Attribute.prototype.TypeBox = function(name, attrs, classname) {
      var html;
      html = '';
      html += "<p class='btn-group'>";
      if (attrs & ATTR_PTR) {
        html += "<button class='btn btn-mini btn-info'>ptr</button>";
      }
      if (attrs & ATTR_REF) {
        html += "<button class='btn btn-mini btn-info'>ref</button>";
      }
      if (attrs & ATTR_CONST) {
        html += "<button class='btn btn-mini'>const</button>";
      }
      if (attrs & ATTR_UNSIGNED) {
        html += "<button class='btn btn-mini'>unsigned</button>";
      }
      if (classname != null) {
        html += "<button class='btn btn-mini btn-success' onclick='location.hash=\"#show-class-" + classname + "\"'>" + name + "</button>";
      } else {
        html += "<button class='btn btn-mini btn-inverse'>" + name + "</button>";
      }
      html += "</p>";
      return html;
    };

    return Attribute;

  })();

  Class = (function(_super) {

    __extends(Class, _super);

    function Class(classname) {
      var attribute, html, method, obj_type, type, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      this.view_type = 'class';
      _ref = project.types;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        type = _ref[_i];
        if (type.name === classname) {
          this.type = type;
          break;
        }
      }
      if (this.type == null) {
        alert("Type " + classname + " not found.");
        throw "Type " + classname + " not found.";
      }
      html = Widget.prototype.Begin("" + type.decl + " " + type.name, 'icon-list-alt');
      html += "<div id='uml'></div>";
      html += Widget.prototype.End();
      if (this.type.methods.length > 0) {
        html += Widget.prototype.Begin("Methods", "icon-cog");
        html += "<div class='span12'></div>";
        _ref1 = this.type.methods;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          method = _ref1[_j];
          obj_type = get_project_type(method.return_type);
          html += "<div class='span12' style='margin-top: 10px;'><div>";
          html += "<div class='method-descriptor'>";
          html += "<span class='span2'>";
          if (obj_type != null) {
            html += Attribute.prototype.TypeBox(method.return_type, method.return_attrs, obj_type.name);
          } else {
            html += Attribute.prototype.TypeBox(method.return_type, method.return_attrs);
          }
          html += "</span>";
          html += "<span class='span2'><h4>" + method.name + "</h4></span>";
          html += "</div>";
          html += "</div>";
          html += "</div>";
        }
        html += Widget.prototype.End();
      }
      if (this.type.attributes.length > 0) {
        html += Widget.prototype.Begin("Attributes", "icon-asterisk");
        html += "<div class='span12'></div>";
        _ref2 = this.type.attributes;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          attribute = _ref2[_k];
          if (attribute.obj_type != null) {
            obj_type = get_project_type(attribute.obj_type);
          }
          html += "<div class='span12' style='margin-top: 10px;'><div>";
          html += "<div class='attribute-descriptor'>";
          html += "<span class='span2'>";
          if (obj_type != null) {
            html += Attribute.prototype.TypeBox(attribute.type, attribute.attrs, obj_type.name);
          } else {
            html += Attribute.prototype.TypeBox(attribute.type, attribute.attrs);
          }
          html += "</span>";
          html += "<span class='span2'>";
          html += "<h4>" + attribute.name + "</h4>";
          html += "</span>";
          html += "</div>";
          html += "</div></div>";
          obj_type = null;
        }
        html += Widget.prototype.End();
      }
      this.elem = $(html);
    }

    Class.prototype.Display = function() {
      Class.__super__.Display.apply(this, arguments);
      return window.uml.generate_hierarchy('uml', this.type.name);
    };

    return Class;

  })(View);

  ClassList = (function(_super) {

    __extends(ClassList, _super);

    function ClassList() {
      var html, i, type, _i, _len, _ref, _ref1;
      html = Widget.prototype.Begin("Class Index (" + project.types.length + " classes)", 'icon-list');
      html += "<table class='table table-striped table-bordered bootstrap-datatable datatable dataTable' id='DataTables_Table_0' aria-describedby='DataTables_Table_0_info'>";
      html += "<thead>";
      html += "<tr role='row'>";
      html += "<th>File</th>";
      html += "<th>Name</th>";
      html += "<th>Overview</th>";
      html += "<th>Actions</th>";
      html += "</tr>";
      html += "</thead>";
      html += "<tbody role='alert' aria-live='polite' aria-relevant='all'>";
      i = 0;
      _ref = project.types;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        type = _ref[_i];
        html += "<tr class='" + ((_ref1 = i % 2 === 0) != null ? _ref1 : {
          'even': 'odd'
        }) + "'>";
        html += "<td></td>";
        html += "<td>" + type.name + "</td>";
        html += "<td></td>";
        html += "<td>";
        html += "<a class='btn btn-success' href='#show-class-" + type.name + "'>";
        html += "<i class='icon-zoom-in icon-white' /> View";
        html += "</a>";
        html += "</td>";
        html += "</tr>";
      }
      html += "</tbody>";
      html += "</table>";
      html += Widget.prototype.End();
      this.elem = $(html);
      (this.elem.find('table')).dataTable({
        "sDom": "<'row-fluid'<'span6'l><'span6'f>r>t<'row-fluid'<'span12'i><'span12 center'p>>",
        "sPaginationType": "bootstrap",
        "oLanguage": {
          "sLengthMenu": "_MENU_ records per page"
        }
      });
    }

    return ClassList;

  })(View);

  MenuEntry = (function() {

    function MenuEntry(menu, id, desc) {
      var html, icon,
        _this = this;
      icon = desc.type === 'search' ? 'icon-eye-open' : desc.type === 'class' ? 'icon-list-alt' : desc.type === 'method' ? 'icon-cog' : desc.type === 'attribute' ? 'icon-asterisk' : void 0;
      this.menu = menu;
      html = "<li id='" + id + "'>";
      html += "<a class='ajax-link' href='" + desc.url + "'><i class='" + icon + "'></i>";
      html += "<span class='hidden-tablet'> " + desc.name + "</span>";
      html += '</a></li>';
      this.elem = $(html);
      this.menu.results.append(this.elem);
      this.elem.click(function() {
        return _this.Clicked();
      });
    }

    return MenuEntry;

  })();

  Menu = (function() {

    function Menu() {
      var _this = this;
      this.dom = $('#main-menu');
      this.search = this.dom.find('#menu-search');
      this.search = $("#main-menu").find("#menu-search");
      this.results = $("#main-menu").find("#menu-results");
      this.entries = [];
      this.search.keyup(function() {
        return _this.SearchUpdate();
      });
    }

    Menu.prototype.SearchUpdate = function() {
      var attribute, max_count, method, regex, res_count, type, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      regex = new RegExp(this.search.attr('value'));
      this.ClearResults();
      if ((this.search.attr('value')) === '') {
        return;
      }
      res_count = 0;
      max_count = 10;
      _ref = project.types;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        type = _ref[_i];
        if (type.name.match(regex)) {
          this.AddMenuEntry(type.name, {
            name: type.name,
            url: "#show-class-" + type.name,
            type: 'class'
          });
          res_count++;
        }
        if (res_count > max_count) {
          break;
        }
        _ref1 = type.methods;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          method = _ref1[_j];
          if (method.name.match(regex)) {
            this.AddMenuEntry(method.name, {
              name: method.name,
              url: "#show-class-" + type.name + "-method-" + method.name,
              type: 'method'
            });
            res_count++;
          }
        }
        if (res_count > max_count) {
          break;
        }
        _ref2 = type.attributes;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          attribute = _ref2[_k];
          if (attribute.name.match(regex)) {
            this.AddMenuEntry(attribute.name, {
              name: attribute.name,
              url: "#show-class-" + type.name + "-attribute-" + attribute.name,
              type: 'attribute'
            });
            res_count++;
          }
        }
        if (res_count > max_count) {
          break;
        }
      }
      if (res_count > max_count) {
        return this.AddMenuEntry('more-results', {
          name: 'More results...',
          url: '#more-results',
          type: 'search'
        });
      }
    };

    Menu.prototype.AddMenuEntry = function(id, desc) {
      var entry;
      entry = new MenuEntry(this, id, desc);
      return this.entries.push(entry);
    };

    Menu.prototype.ClearResults = function() {
      this.results.empty();
      return this.entries = [];
    };

    return Menu;

  })();

  Breadcrumb = (function() {

    function Breadcrumb() {
      console.log('Breadcrumb');
      this.dom = $('#breadcrumb');
    }

    Breadcrumb.prototype.Clear = function() {
      this.dom.empty();
      return this;
    };

    Breadcrumb.prototype.Add = function(name, url) {
      var html;
      (this.dom.find('li')).last().append("<span class='divider'>/</span>");
      html = "<li>";
      if (url != null) {
        html += "<a href='" + url + "'>";
      }
      html += name;
      if (url != null) {
        html += '</a>';
      }
      html += "</li>";
      this.dom.append(html);
      return this;
    };

    Breadcrumb.prototype.PrefabClasses = function() {
      return this.Clear().Add('Project').Add('Class List', '#class-index');
    };

    Breadcrumb.prototype.PrefabClass = function(class_name) {
      return this.PrefabClasses().Add('Class').Add(class_name, "#show-class-" + class_name);
    };

    return Breadcrumb;

  })();

  AnchorHandle = (function() {

    function AnchorHandle() {
      var callback,
        _this = this;
      callback = function() {
        return _this.Refresh();
      };
      setInterval(callback, 50);
      this.anchor = location.hash;
      this.routes = [];
    }

    AnchorHandle.prototype.AddRoute = function(regex, callback) {
      return this.routes.push({
        exp: regex,
        callback: callback
      });
    };

    AnchorHandle.prototype.Refresh = function() {
      if (this.anchor !== location.hash) {
        this.anchor = location.hash;
        return this.Execute();
      }
    };

    AnchorHandle.prototype.Execute = function() {
      var route, _i, _len, _ref;
      console.log('Execute anchor path matching');
      _ref = this.routes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        route = _ref[_i];
        if (this.anchor.match(route.exp)) {
          console.log('Found matching route');
          route.callback(this.anchor);
          return;
        }
      }
      return alert('Not Found');
    };

    return AnchorHandle;

  })();

  $(document).ready(function() {
    console.log('[Twilidoc] Initializing');
    window.menu = new Menu();
    window.breadcrumb = new Breadcrumb();
    window.anchor_handle = new AnchorHandle();
    window.anchor_handle.AddRoute(/^$/, function() {
      return console.log('Index');
    });
    window.anchor_handle.AddRoute(/#class-index/, function() {
      console.log('anchor handler executed');
      window.class_list = new ClassList();
      window.class_list.Display();
      return window.breadcrumb.PrefabClasses();
    });
    window.anchor_handle.AddRoute(/#show-class-[^-]+$/, function() {
      var class_view, matches;
      matches = /#show-class-([^-]+)$/.exec(window.anchor_handle.anchor);
      class_view = new Class(matches[1]);
      class_view.Display();
      return window.breadcrumb.PrefabClass(matches[1]);
    });
    window.anchor_handle.AddRoute(/#show-class-[^-]+-method-[^-]+$/, function() {
      var klass, matches, method;
      matches = /#show-class-([^-]+)-method-([^-]+)$/.exec(window.anchor_handle.anchor);
      klass = matches[1];
      method = matches[2];
      if ((window.current_view != null) && window.current_view.view_type === 'class' && window.current_view.type.name === klass) {
        return alert('We\'re already in the good class !');
      } else {
        return window.breadcrumb.PrefabClass(matches[1]).Add('Methods').Add(matches[2], "#show-class-" + matches[1] + "-method-" + matches[2]);
      }
    });
    window.anchor_handle.AddRoute(/#show-class-[^-]+-attribute-[^-]+$/, function() {
      var attr, klass, matches;
      matches = /#show-class-([^-]+)-attribute-([^-]+)$/.exec(window.anchor_handle.anchor);
      klass = matches[1];
      attr = matches[2];
      if ((window.current_view != null) && window.current_view.view_type === 'class' && window.current_view.type.name === klass) {
        return alert('We\'re already in the good class !');
      } else {
        return window.breadcrumb.PrefabClass(matches[1]).Add('Attributes').Add(matches[2], "#show-class-" + matches[1] + "-attribute-" + matches[2]);
      }
    });
    window.anchor_handle.Execute();
    return console.log('[Twilidoc] Finished initializing');
  });

}).call(this);
